Description: >
  Rohit Paul
  Udacity IaC Project - server architecture
Parameters:
  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String
  KeyPair:
    Description: Keypair to use for secure shell connection
    Type: String
    Default: 'myKey'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: 't2.micro'
  S3WebConfigBucket:
    Description: S3 bucket containing web configuration assets
    Type: String
Resources:
  UdagramInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref UdagramS3ReadableRole
  UdagramS3ReadableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UdagramInstancePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${S3WebConfigBucket}/*"
      Roles:
        - !Ref UdagramS3ReadableRole
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to hosts and SSH from anywhere
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        # Ubuntu 18
        ImageId: ami-07b4f3c02c7f83d59
        InstanceType: !Ref InstanceType
        SecurityGroups:
          - Ref: WebServerSecGroup
        IamInstanceProfile: !Ref UdagramInstanceProfile
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'      
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -x
            export AWS_STACK="${AWS::StackName}"
            export AWS_REGION="${AWS::Region}"
            export S3_BUCKET="${S3WebConfigBucket}"
            # Install 'cfn-signal' helper script
            sudo apt-get update
            sudo apt-get -y install python-pip
            sudo pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install requisite packages
            sudo apt-get -y install awscli
            sudo apt-get -y install openjdk-11-jdk
            # Set up hosted app directory
            sudo mkdir /opt/udagram
            sudo useradd -m -U -d /opt/udagram -s /bin/false springboot
            sudo chown -R springboot: /opt/udagram
            # Spring Boot (embedded Tomcat) application
            sudo aws s3 cp s3://$S3_BUCKET/udagram-0.1.0.jar /opt/udagram/udagram.jar
            # systemd-related configuration files
            sudo aws s3 cp s3://$S3_BUCKET/udagram.service /etc/systemd/system/
            sudo aws s3 cp s3://$S3_BUCKET/udagram.env /etc/default/udagram
            sudo aws s3 cp s3://$S3_BUCKET/udagram-rsyslog.conf /etc/rsyslog.d/30-udagram.conf
            sudo systemctl restart syslog.service
            # Required for privileged port binding (tcp/80)
            sudo setcap 'cap_net_bind_service=+eip' /usr/lib/jvm/java-11-openjdk-amd64/bin/java
            # Enable and start the WebApp service
            sudo systemctl --now enable udagram.service
            # Script to check that Tomcat service has started and signal error otherwise
            sudo aws s3 cp s3://$S3_BUCKET/service_check.sh ./service_check.sh
            sudo chmod u+x service_check.sh
            sudo ./service_check.sh udagram.service
            # Send success status signal to CloudFormation
            /usr/local/bin/cfn-signal -e $? --stack $AWS_STACK --resource WebAppAutoScalingGroup --region $AWS_REGION 
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
    CreationPolicy:       
      ResourceSignal:
        Count: 4
        Timeout: PT10M       
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/*]
      ListenerArn: !Ref Listener
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
Outputs:
  LoadBalancerWebUrl:
    Description: The public URL of the elastic load balancer
    Value: !Sub "http://${WebAppLB.DNSName}"